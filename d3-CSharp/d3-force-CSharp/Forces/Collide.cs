using d3_essentials;
using d3_force_CSharp.Utility;

namespace d3_force_CSharp.Forces;

/*
 The Collide force simulates collision between different nodes, 
    - consider nodes as circles with radius and try to avoid overlapping.
    - by default each node has a radius of 1, but you can change that and even implement your own radius function that takes the node index into considration.
 */
public class Collide
{
    //the radius should be a property of the Node itself and not part of the collide force ...
    public double strength { get; set; }
    public double random { get; set; }
    public int iterations { get; set; }
    private List<Node> nodes;
    
    public Collide(List<Node> nodes, double strength = 1.0, double random = 1.0, int iterations = 1) {
        this.strength = strength;
        this.random = random;
        this.iterations = iterations;
        this.nodes = nodes;
    }
    
    
    public void force() {
        int i;
        int n = nodes.Count;
        //create tree = quadTree
        double xi, yi, ri, ri2;
        Node curNode;

        for (int k=0; k<iterations; ++k) {
            // create a quadtree? tree = quadtree(nodes, x, y).visitAfter(prepare);
            // I think this calls a function called prepare()
            for (i=0; i<n; ++i) {
                curNode = nodes[i];
                ri = nodes[i].radius(); 
                ri2 = ri * ri;
                xi = curNode.x + curNode.vx;
                yi = curNode.y + curNode.vy;
                //tree.visit (apply)
                //this calls a function called apply()
                /* code generated by github copilot
                 ri = curNode.r + radius;
                ri2 = ri * ri;
                curNode.x = Math.Max(radius, Math.Min(width - radius, curNode.x));
                curNode.y = Math.Max(radius, Math.Min(height - radius, curNode.y));*/
            }
        }
    }

    private void prepare() {
        
    }

    private void apply() {
        
    }
    
    public void setNodes(List<Node> nodes) {
        this.nodes = nodes;
    }
    
}